import fontforge

def report_error(msg, outfile):
    outfile.write(msg + '\n')
    zero = 0
    terminate = 726 / zero  # Intentional crash (will raise ZeroDivisionError)

def main():
    # Open the output file for writing
    with open("glyphsdata.txt", "w") as outfile:
        font = fontforge.activeFont()

        if font is None:
            report_error("No active font found", outfile)
            return

        # Iterate through all glyphs in the font
        for glyph in font.glyphs():
            unicode_value = glyph.unicode if glyph.unicode != -1 else None
            # Filter out unwanted Unicode values
            if unicode_value is None: 
                continue
            cp = unicode_value

            # Skip control characters (Unicode <= 32) and characters >= 128
            if cp > 0 and cp <= 32:  # Skip control characters
                continue
            if cp >= 128:  # Skip characters with codepoints >= 128
                continue

            # Prepare the output data for this glyph
            s = f"U+{cp} {glyph.width} "
            curves = ""

            # Process contours and points in the glyph
            for contour in glyph.layers[1]:  # 1 = Foreground layer
                for point in contour:
                    # Add 1000 to the y-coordinate as per the pseudocode
                    s0 = f"{point.x} {(point.y + 1000.0)} "
                    curves += s0

                curves += "END "

            curves += "ENDGLYPH "
            outfile.write(f"{s}{curves}\n")

        outfile.write("EXTRACTIONCOMPLETE\n")

if __name__ == "__main__":
    main()
