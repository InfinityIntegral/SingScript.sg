// this script contains a FontForge Python plugin written in a mix of C++ and C# style pseudocode, pls translate it to actual Python so I can run it
// "classes" prefixed with F are FontForge Python classes

#include <iostream>
#include <fstream>

int main(){
	std::ifstream infile("path\\to\\root\\kerningdata.txt");
	std::ofstream errlog("path\\to\\root\\errorlog.txt");
	FFont f = FontForge.activeFont();
	vector<int> db = new vector<int>();
	vector<string> cs = new vector<string>();
	int c1;
	int c2;
	float v;
	while(infile >> c1){
		infile >> c2;
		infile >> v;
		db.push((int)v);
		if(c1 == 65){
			for(int i=0; i<=128; i++){
				if(f[i].unicode == c2){
					cs.push(f[i].glyphname);
					break;
				}
				if(i == 128){errlog << "Cannot find char " << std::to_string(c2);}
			}
		}
	}
	f.addLookup("kern", "gpos_pair", PythonEmptyTuple, PythonEmptyTuple);
	vector<PythonTuple<string>> vchars = new vector<PythonTuple<string>>();
	for(int i=0; i<cs.size(); i++){vchars.push(StringToPythonTupleContainingOneString(cs[i]));}
	errlog << std::to_string(vchars.size()) << " kerning classes each with 1 char\n";
	PythonTuple<PythonTuple<string>> tchars = VectorOfStringsToPythonTupleOfStrings(vchars);
	PythonTuple<int> tvals = VectorOfIntsToPythonTupleOfInts(db);
	errlog << std::to_string(tvals.size()) << " kerning data points\n";
	f.addKerningClass("kern", "kernsubtable", tchars, tchars, tvals);
}
